print(i)
#################################################################################
#ffff00 = Target objects (for now, the first target for all agents)
## Can be placed in any shelf position (so every wall tile minus the entrance wall)
shelf_mat <- store_layout$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
shelf_positions$item_id <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$item_id),]
store_layout$target_df<-shelf_positions
source("simulate.R", local=TRUE)
n_reps = 5
results = list()
for(i in 1:n_reps) {
results[i] <- simulate("example.pbm", storedata=storedata, n_agents = 100, plot=FALSE)
}
View(results)
# Baseline: completely randomised arrangement of items
results = list()
for(i in 1:n_reps) {
results[[i]] <- simulate("example.pbm", storedata=storedata, n_agents = 100, plot=FALSE)
}
View(results)
plot_mat(results[[1]])
plot_mat(results[[1]][[2]])
plot_mat(results[[1]][[1]])
plot_mat(results[[1]][[3]])
plot_mat(results[[1]][[2]])
plot_mat(results[[1]][[2]])
plot <- plot_mat(results[[1]][[2]])
plot
plot <- plot_mat(results[[1]][[1]])
plot
plot <- plot_mat(results[[1]][[1]])
plot
mat <- results[[1]][[1]]
plot_mat(mat)
plot_mat(mat)
p<-plot_mat(mat)
p
save.image("~/Desktop/IMMC/IMMC/bak2.RData")
# Get the store_layout for editing
store_layout <- read_img_map("example.pbm")
source("simulate.R", local=TRUE)
# Get the store_layout for editing
store_layout <- read_img_map("example.pbm")
# Ascending
store_layout_ascending <- store_layout
shelf_mat <- store_layout_ascending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
shelf_positions$item_id <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$item_id),]
store_layout_ascending$target_df<-shelf_positions
# Descending
store_layout_descending <- store_layout
shelf_mat <- store_layout_descending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
shelf_positions$item_id <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$item_id),]
store_layout_descending$target_df<-shelf_positions
library(doParallel)
results_ascending = list()
for(i in 1:n_reps) {
results_ascending[[i]] <- simulate(store_layout = store_layout_ascending, storedata=storedata, n_agents = 100, plot=FALSE, from_bitmap = FALSE)
}
View(store_layout_ascending)
plot_df(store_layout_ascending$target_df)
store_layout_ascending[["target_df"]]
store_layout$target_df
# Ascending
store_layout_ascending <- store_layout
shelf_mat <- store_layout_ascending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
shelf_positions$value <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$item_id),]
store_layout_ascending <- store_layout
shelf_mat <- store_layout_ascending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
shelf_positions$value <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$value),]
store_layout_ascending$target_df<-shelf_positions
simulate(store_layout = store_layout_ascending, storedata=storedata, n_agents = 100, plot=FALSE, from_bitmap = FALSE)
results_ascending = list()
plot_df(store_layout$target_df)
plot_df(store_layout_ascending$target_df)
plot_df(store_layout$target_df)
View(shelf_positions)
shelf_positions<-shelf_positions[order(shelf_positions$y),]
# Ascending
store_layout_ascending <- store_layout
shelf_mat <- store_layout_ascending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
shelf_positions$value <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$value),]
store_layout_ascending$target_df<-shelf_positions
plot_df(shelf_positions)
results_ascending = list()
for(i in 1:n_reps) {
results_ascending[[i]] <- simulate(store_layout = store_layout_ascending, storedata=storedata, n_agents = 100, plot=FALSE, from_bitmap = FALSE)
}
View(results_ascending)
View(results)
View(results_ascending)
View(results)
results_descending = list()
for(i in 1:n_reps) {
results_descending[[i]] <- simulate(store_layout = store_layout_descending, storedata=storedata, n_agents = 100, plot=FALSE, from_bitmap = FALSE)
}
# Descending
store_layout_descending <- store_layout
shelf_mat <- store_layout_descending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
shelf_positions$value <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$value),]
store_layout_descending$target_df<-shelf_positions
results_descending = list()
for(i in 1:n_reps) {
results_descending[[i]] <- simulate(store_layout = store_layout_descending, storedata=storedata, n_agents = 100, plot=FALSE, from_bitmap = FALSE)
}
View(results_descending)
plot_mat(results_descending[[1]][[1]])
plot_mat(results_ascending[[1]][[1]])
plot_mat(results_descending[[1]][[1]])
plot_mat(results_ascending[[1]][[1]])
saveRDS("results", file="default_random.rds")
saveRDS("results_ascending", file="default_ascending.rds")
saveRDS("results_descending", file="default_descending.rds")
saveRDS(results, file="default_random.rds")
saveRDS(results_ascending, file="default_ascending.rds")
saveRDS(results_descending, file="default_descending.rds")
plot_mat(results_descending[[1]][[2]])
plot_mat(results_ascending[[1]][[2]])
View(results_descending)
View(results_descending[[1]][[1]])
View(results_descending[[1]][[2]])
plot_mat(results_descending[[1]][[2]])
# Ascending (i.e. more desirable items farther away)
store_layout_ascending <- store_layout
shelf_mat <- store_layout_ascending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
View(shelf_positions)
# Ascending (i.e. more desirable items farther away)
store_layout_ascending <- store_layout
shelf_mat <- store_layout_ascending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
shelf_positions$value <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$value),]
View(shelf_positions)
place_items <- function(store_layout, storedata, ordering_function) {
shelf_mat <- store_layout_ascending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
# Select 134 shelf positions from possible positions
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
# Insert an item into each shelf position
## Sort positions by increasing y position
shelf_positions<-order_positions_ascending_y(shelf_positions)
## Sort items by increasing GHI
storedata_sorted<-order_items_ascending_ghi(storedata)
## Bind positions to items
shelf_positions$value <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$value),]
store_layout$target_df<-shelf_positions
}
order_positions_ascending_y <- function(shelf_positions) {
shelf_positions<-shelf_positions[order(shelf_positions$y),]
return(shelf_positions)
}
order_items_ascending_ghi <- function(storedata) {
storedata_sorted<-storedata[order(storedata$ghi),]
return(storedata_sorted)
}
place_items <- function(store_layout, storedata, select_positions, order_positions, order_items) {
shelf_mat <- store_layout_ascending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
# Select 134 shelf positions from possible positions
shelf_positions <- select_positions(shelf_df)
# Insert an item into each shelf position
## Sort positions by increasing y position
shelf_positions<-order_positions(shelf_positions)
## Sort items by increasing GHI
storedata_sorted<-order_items(storedata)
## Bind positions to items
shelf_positions$value <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$value),]
store_layout$target_df<-shelf_positions
return(store_layout)
}
select_positions_random <- function(shelf_df) {
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
return(shelf_positions)
}
order_positions_ascending_y <- function(shelf_positions) {
shelf_positions<-shelf_positions[order(shelf_positions$y),]
return(shelf_positions)
}
order_items_ascending_ghi <- function(storedata) {
storedata_sorted<-storedata[order(storedata$ghi),]
return(storedata_sorted)
}
test_store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_ascending_ghi)
View(test_store_layout)
View(test_store_layout[["target_df"]])
order_positions_descending_y <- function(shelf_positions) {
shelf_positions<-shelf_positions[order(-shelf_positions$y),]
return(shelf_positions)
}
test_store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_descending_y, order_items_ascending_ghi)
View(test_store_layout[["target_df"]])
sample(storedata$item_id)
order_items_random <- function(storedata) {
storedata_sorted <- storedata[sample(storedata$item_id),]
}
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
View(store_layout_random)
View(store_layout_random[["target_df"]])
# Ascending (i.e. more desirable items farther away)
store_layout_ascending <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_ascending_ghi)
img <- read.pnm(example.pbm)
img <- read.pnm("example.pbm")
img@red
plot(img@red)
plot(img)
img <- read.pnm("store_layout/bitmap/original_layout_cleaned.pbm")
plot(img)
plot_mat(img@red)
cashier_in_mat <- img@red[which(img@red==0.2)]
plot_mat(cashier_in_mat)
cashier_in_mat <- img@red[which(img@red==0.2)]
View(img@red)
cashier_in_mat <- img@red[which(img@red==0.3176471)]
cashier_in_mat <- img@red
cashier_in_mat <- img@red * 255
View(cashier_in_mat)
img <- read.pnm("store_layout/bitmap/original_layout_cleaned.pbm")
View(img@red)
test <- img@red[which(img@red==0.2)]
cashier_in_mat[which(cashier_in_mat==1)] <- 0
cashier_in_mat <- img@red
cashier_in_mat[which(cashier_in_mat==1)] <- 0
cashier_in_mat <- cashier_in_mat * 5
plot_mat(cashier_in_mat)
cashier_out_mat <- img@blue
cashier_out_mat[which(cashier_out_mat==1)] <- 0
cashier_out_mat <- cashier_out_mat * 5
plot(cashier_out_mat)
plot_mat(cashier_out_mat)
source('~/Desktop/IMMC/IMMC/simulate.R', echo=TRUE)
source('~/Desktop/IMMC/IMMC/simulate.R', echo=TRUE)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 5
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
View(store_layout)
store_layout[["target_df"]]
View(store_layout[["target_df"]])
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$cashier_mat)
plot_mat(store_layout$cashier_in_mat)
# Pull a store_layout from an image
new_store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
# Pull a store_layout from an image
new_store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
source("simulate.R", local=TRUE)
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
new_store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
plot_mat(store_layout$cashier_in_mat)
plot_mat(new_store_layout$cashier_in_mat)
plot_mat(new_store_layout$cashier_out_mat)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
plot_df(store_layout_random$target_df)
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
plot_df(store_layout_random$target_df)
test <- simulate(store_layout = store_layout_random, storedata=storedata, n_agents = 100, plot=TRUE, from_bitmap = FALSE)
View(test)
img <- read.pnm("store_layout/bitmap/original_layout_blocked.pbm")
blocked_mat <- img@red + img@blue
blocked_mat[which(blocked_mat!=2)]<-0
plot_mat(blocked_mat)
blocked_mat <- img@red + img@blue + img@green
blocked_mat[which(blocked_mat!=2)]<-0
plot_mat(blocked_mat)
img <- read.pnm("store_layout/bitmap/original_layout_blocked.pbm")
blocked_mat <- img@red + img@blue + img@green
blocked_mat[which(blocked_mat!=2)]<-0
plot_mat(blocked_mat)
blocked_mat <- img@red + img@blue + img@green
View(blocked_mat)
blocked_mat[which(blocked_mat!=1.6)]<-0
plot_mat(blocked_mat)
blocked_mat <- blocked_mat / 1.6
plot_mat(blocked_mat)
img <- read.pnm("store_layout/bitmap/original_layout_blocked.pbm")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 5
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$blocked_mat)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 5
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$blocked_mat)
plot_mat(store_layout$cashier_mat)
plot_mat(store_layout$cashier_in_mat)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$cashier_in_mat)
plot_mat(store_layout$cashier_out_mat)
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$blocked_mat)
plot_mat(store_layout$entrance_mat)
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
img <- read.pnm("store_layout/bitmap/original_layout_blocked.pbm")
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$cashier_mat)
plot_mat(store_layout$cashier_in_mat)
plot_mat(store_layout$cashier_out_mat)
plot_mat(store_layout$cashier_in_mat)
plot_mat(store_layout$entrance_mat)
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$entrance_mat)
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
store_layout$walls_mat
plot_mat(store_layout$blocked_mat)
plot_mat(store_layout$cashier_mat)
plot_mat(store_layout$cashier_in_mat)
plot_mat(store_layout$cashier_out_mat)
plot_mat(store_layout$entrance_mat)
plot_mat(store_layout$exit_mat)
plot_mat(store_layout$target_df)
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
source("shelfer.R", local=TRUE)
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
source("shelfer.R", local=TRUE)
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
plot_df(store_layout_random$target_df)
View(storedata)
View(storedata)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
View(store_layout)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
make_df(shelves)
shelves_df <- make_df(shelves, "value")
View(shelves_df)
plot_mat(walls_mat)
plot_mat(store_layout$walls_mat)
store_layout <- read_img_map("store_layout/ideas/tham_2.pbm")
store_layout <- read_img_map("store_layout/ideas/tham_2.pbm")
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$blocked_mat)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
plot_mat(shelves)
make_df_full(plot_mat)
make_df_full(shelves)
test <- make_df_full(shelves)
View(test)
shelves <- test[which(test$value==1),]
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
plot_mat(store_layout$blocked_mat)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
plot_mat(shelves)
test <- make_df_full(shelves)
shelves <- test[which(test$value==1),]
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
plot_mat(store_layout$blocked_mat)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
plot_mat(shelves)
test <- make_df_full(shelves)
shelves <- test[which(test$value==1),]
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
plot_mat(store_layout$blocked_mat)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
plot_mat(shelves)
test <- make_df_full(shelves)
shelves <- test[which(test$value==1),]
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
store_layout_ascending <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_ascending_ghi)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
results[[i]] <- simulate(store_layout = store_layout_ascending, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout_ascending, results)
saveRDS(output, "tham_layout_1_ascending.rds")
View(results)
plot_mat(results[[1]][[2]])
plot_mat(results[[1]][[1]])
plot_mat(results[[1]][[2]])
