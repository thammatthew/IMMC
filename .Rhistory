plot_output(output, "default_euclidean_cashier")
output <- list(store_layout_ascending, results)
output <- list(store_layout, results)
saveRDS(output, "default_euclidean_cashier.rds")
plot_output(output, "default_euclidean_cashier")
View(output)
plot_output <- function(output, filename) {
results <- output[[2]]
store_layout <- output[[1]]
density_mat_avg <- matrix(0, 48, 48)
loss_mat_avg <- matrix(0,48,48)
loss <- c()
for(i in 1:length(results)) {
density_mat_avg <- density_mat_avg + results[[i]][[1]]
loss_mat_avg <- loss_mat_avg + results[[i]][[2]]
loss <- c(loss, results[[i]][[3]])
}
loss_avg <- mean(loss)
loss_sd <- sd(loss)
density_mat_avg <- density_mat_avg/length(results)
loss_mat_avg <- loss_mat_avg/length(results)
density_df_avg <- make_df_full(density_mat_avg)
loss_df_avg <- make_df_full(loss_mat_avg)
walls_df <- make_df(store_layout$walls_mat, 1)
entrance_df <- make_df(store_layout$entrance_mat, 1)
exit_df <- make_df(store_layout$exit_mat, 1)
target_df <- store_layout$target_df
p1<-ggplot(walls_df, aes(x=x, y=y)) +
geom_rect(xmin=0.5,xmax=48.5,ymin=0.5,ymax=48.5, fill="#000000") +
geom_tile(data=walls_df, fill="#FFFFFF") +
geom_tile(data=entrance_df, fill="#FF0000") +
geom_tile(data=exit_df, fill="#0000FF") +
geom_tile(data=target_df, aes(fill=ghi)) +
scale_y_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
scale_fill_distiller(palette="Spectral") +
theme(axis.title = element_blank(),
axis.text = element_blank()) +
labs(fill="GHI", title = "Store Layout")
ggsave(plot=p1, filename=paste(filename,"_layout.svg",sep=""), width=5, height=5, units="in", dpi=300, device="svg")
p2<-ggplot(density_df_avg, aes(x=x, y=y, fill=value)) +
geom_tile() +
geom_tile(data=walls_df, fill="#FFFFFF") +
geom_tile(data=entrance_df, fill="#FF0000") +
geom_tile(data=exit_df, fill="#0000FF") +
scale_y_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
scale_fill_viridis_c() +
theme(axis.title = element_blank(),
axis.text = element_blank()) +
labs(fill="Density", title = "Pedestrian Density")
ggsave(plot=p2, filename=paste(filename,"_density.svg",sep=""), width=5, height=5, units="in", dpi=300, device="svg")
p3<-ggplot(loss_df_avg, aes(x=x, y=y, fill=value)) +
geom_tile() +
geom_tile(data=walls_df, fill="#FFFFFF") +
geom_tile(data=entrance_df, fill="#FF0000") +
geom_tile(data=exit_df, fill="#0000FF") +
scale_y_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
scale_fill_viridis_c() +
theme(axis.title = element_blank(),
axis.text = element_blank()) +
labs(fill="Loss", title = paste("Monetary Loss =",round(loss_avg, 2),"SD =",round(loss_sd,2)))
ggsave(plot=p3, filename=paste(filename,"_loss.svg",sep=""), width=5, height=5, units="in", dpi=300, device="svg")
plots <- list(p1, p2, p3)
return(plots)
}
plot_output(output, "default_euclidean_cashier")
plot_output <- function(output, filename) {
results <- output[[2]]
store_layout <- output[[1]]
density_mat_avg <- matrix(0, 48, 48)
loss_mat_avg <- matrix(0,48,48)
loss <- c()
for(i in 1:length(results)) {
density_mat_avg <- density_mat_avg + results[[i]][[1]]
loss_mat_avg <- loss_mat_avg + results[[i]][[2]]
loss <- c(loss, results[[i]][[3]])
}
loss_avg <- mean(loss)
loss_sd <- sd(loss)
density_mat_avg <- density_mat_avg/length(results)
loss_mat_avg <- loss_mat_avg/length(results)
density_df_avg <- make_df_full(density_mat_avg)
loss_df_avg <- make_df_full(loss_mat_avg)
walls_df <- make_df(store_layout$walls_mat, 1)
entrance_df <- make_df(store_layout$entrance_mat, 1)
exit_df <- make_df(store_layout$exit_mat, 1)
target_df <- store_layout$target_df
p1<-ggplot(walls_df, aes(x=x, y=y)) +
geom_rect(xmin=0.5,xmax=48.5,ymin=0.5,ymax=48.5, fill="#000000") +
geom_tile(data=walls_df, fill="#FFFFFF") +
geom_tile(data=entrance_df, fill="#FF0000") +
geom_tile(data=exit_df, fill="#0000FF") +
geom_tile(data=target_df, aes(fill=ghi)) +
scale_y_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
scale_fill_distiller(palette="Spectral") +
theme(axis.title = element_blank(),
axis.text = element_blank()) +
labs(fill="GHI", title = "Store Layout")
ggsave(plot=p1, filename=paste(filename,"_layout.svg",sep=""), width=5, height=5, units="in", dpi=300, device="svg")
p2<-ggplot(density_df_avg, aes(x=x, y=y, fill=value)) +
geom_tile() +
geom_tile(data=walls_df, fill="#FFFFFF") +
geom_tile(data=entrance_df, fill="#FF0000") +
geom_tile(data=exit_df, fill="#0000FF") +
scale_y_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
scale_fill_viridis_c() +
theme(axis.title = element_blank(),
axis.text = element_blank()) +
labs(fill="Density", title = "Pedestrian Density")
ggsave(plot=p2, filename=paste(filename,"_density.svg",sep=""), width=5, height=5, units="in", dpi=300, device="svg")
p3<-ggplot(loss_df_avg, aes(x=x, y=y, fill=value)) +
geom_tile() +
geom_tile(data=walls_df, fill="#FFFFFF") +
geom_tile(data=entrance_df, fill="#FF0000") +
geom_tile(data=exit_df, fill="#0000FF") +
scale_y_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
scale_fill_viridis_c() +
theme(axis.title = element_blank(),
axis.text = element_blank()) +
labs(fill="Loss", title = paste("Mean Loss =",round(loss_avg, 2),"SD =",round(loss_sd,2)))
ggsave(plot=p3, filename=paste(filename,"_loss.svg",sep=""), width=5, height=5, units="in", dpi=300, device="svg")
plots <- list(p1, p2, p3)
return(plots)
}
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
print(files)
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
lapply(files, function(x) {
output <- readRDS(x)
plot_output(output, filename = paste("plot_",x))
})
test <- files[1]
test
strsplit(test, "\\.")
strsplit(test, "[.]|[/]")
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
lapply(files, function(x) {
output <- readRDS(x)
filename = strsplit(x, "[.]|[/]")[[2]]
filename = paste("plots/",filename,sep="")
plot_output(output, filename = paste("plot_",filename))
})
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
lapply(files, function(x) {
print(x)
output <- readRDS(x)
filename = strsplit(x, "[.]|[/]")[[2]]
filename = paste("plots/",filename,sep="")
plot_output(output, filename = paste("plot_",filename))
})
test <- files[1]
test<- strsplit(test, "[.]|[/]")
test[[1]]
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
lapply(files, function(x) {
print(x)
output <- readRDS(x)
filename = strsplit(x, "[.]|[/]")[[1]]
filename = paste("plots/",filename,sep="")
plot_output(output, filename = paste("plot_",filename))
})
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
lapply(files, function(x) {
print(x)
output <- readRDS(x)
filename = strsplit(x, "[.]|[/]")[[1]]
filename = paste("plots/",filename,sep="")
print(filename)
plot_output(output, filename = paste("plot_",filename))
})
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
files[[1]]
lapply(files, function(x) {
print(x)
output <- readRDS(x)
filename = strsplit(x, "[.]|[/]")[[2]]
filename = paste("plots/",filename,sep="")
print(filename)
plot_output(output, filename = paste("plot_",filename))
})
lapply(files, function(x) {
print(x)
output <- readRDS(x)
names = strsplit(x, "[.]|[/]")
print(names)
filename = paste("plots/",filename,sep="")
print(filename)
plot_output(output, filename = paste("plot_",filename))
})
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
lapply(files, function(x) {
print(x)
output <- readRDS(x)
names = strsplit(x, "[.]|[/]")
print(names)
filename = paste("plots/",filename,sep="")
print(filename)
plot_output(output, filename = paste("plot_",filename))
})
lapply(files, function(x) {
print(x)
output <- readRDS(x)
names = strsplit(x, "[.]|[/]")
print(names[2])
filename = paste("plots/",filename,sep="")
print(filename)
plot_output(output, filename = paste("plot_",filename))
})
lapply(files, function(x) {
print(x)
output <- readRDS(x)
names = strsplit(x, "[.]|[/]")
print(names[[1]])
filename = paste("plots/",filename,sep="")
print(filename)
plot_output(output, filename = paste("plot_",filename))
})
lapply(files, function(x) {
print(x)
output <- readRDS(x)
names = strsplit(x, "[.]|[/]")
print(names[[1]])
})
lapply(files, function(x) {
print(x)
names = strsplit(x, "[.]|[/]")
print(names)
})
lapply(files, function(x) {
print(x)
names = strsplit(x, "[.]|[/]")
print(names[1])
})
for(i in 1:length(files)) {
print(files[[1]])
}
for(i in 1:length(files)) {
print(files[[i]])
names = strsplit(files[[i]], "[[.]]|[[/]]")
}
for(i in 1:length(files)) {
print(files[[i]])
names = strsplit(files[[i]], "[.]|[/]")
}
for(i in 1:length(files)) {
print(files[[i]])
names = strsplit(files[[i]], "[.]|[/]")
print(names)
}
for(i in 1:length(files)) {
print(files[[i]])
names = strsplit(files[[i]], "[.]|[/]")[[1]]
print(names)
}
for(i in 1:length(files)) {
print(files[[i]])
names = strsplit(files[[i]], "[.]|[/]")[[2]]
print(names)
}
for(i in 1:length(files)) {
print(files[[i]])
names = strsplit(files[[i]], "[.]|[/]")[[1]][[1]]
print(names)
}
for(i in 1:length(files)) {
print(files[[i]])
names = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
print(names)
}
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
names = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
plot_output(output, filename=names)
}
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
name = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
name = paste("plots/",name,sep="")
plot_output(output, filename=names)
}
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
print(files)
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
name = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
name = paste("experimental_plots/",name,sep="")
plot_output(output, filename=names)
}
name = strsplit(files[[1]], "[.]|[/]")[[1]][[2]]
name = paste("experimental_plots/",name,sep="")
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
name = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
plot_output(output, filename=names)
}
name=c()
for(i in 1:length(files)) {
name[i] = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
}
print(name)
name[1]
name[2]
name[3]
name[4]
name[5]
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
name = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
plot_output(output, filename=name)
}
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
name = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
print(name)
}
output<-readRDS("experimental_results/default_euclidean_entrance.rds")
View(output)
p3<-ggplot(loss_df_avg, aes(x=x, y=y, fill=value)) +
geom_tile() +
geom_tile(data=walls_df, fill="#FFFFFF") +
geom_tile(data=entrance_df, fill="#FF0000") +
geom_tile(data=exit_df, fill="#0000FF") +
scale_y_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 4), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
scale_fill_viridis_c() +
theme(axis.title = element_blank(),
axis.text = element_blank()) +
labs(fill="Loss", title = paste("Mean Loss =",round(loss_avg, 2),"SD =",round(loss_sd,2)))
plot_df(store_layout$entrance_mat)
plot_mat(store_layout$entrance_mat)
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
name = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
print(name)
}
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
name = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
print(name)
}
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
name = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
print(name)
}
files <- list.files(path="experimental_results", pattern="*.rds", full.names=TRUE, recursive=FALSE)
for(i in 1:length(files)) {
print(files[[i]])
output<-readRDS(files[[i]])
name = strsplit(files[[i]], "[.]|[/]")[[1]][[2]]
plot_output(output, name)
}
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/derek_alt_3.pbm")
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=23, y=38)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
print(paste("Simulating replicate",i))
results[[i]] <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout, results)
saveRDS(output, "default_derek_alt_3_cashier_090.rds")
plot_output(output, "default_derek_alt_3_cashier_090.rds")
store_layout <- read_img_map("store_layout/ideas/derek_alt_3.pbm")
plot_mat(store_layout$cashier_mat)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/derek_alt_3.pbm")
plot_mat(store_layout$cashier_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=44, y=39)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
print(paste("Simulating replicate",i))
results[[i]] <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout, results)
saveRDS(output, "default_derek_alt_3_cashier_090.rds")
plot_output(output, "default_derek_alt_3_cashier_090.rds")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/derek_alt_3.pbm")
plot_mat(store_layout$cashier_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=44, y=39)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
print(paste("Simulating replicate",i))
results[[i]] <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout, results)
saveRDS(output, "default_derek_alt_3_cashier_090.rds")
plot_output(output, "default_derek_alt_3_cashier_090.rds")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_2.pbm")
plot_mat(store_layout$cashier_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=44, y=39)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
print(paste("Simulating replicate",i))
results[[i]] <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout, results)
saveRDS(output, "default_tham_2_cashier_090.rds")
plot_output(output, "default_tham_2_cashier_090.rds")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_2.pbm")
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=42, y=42)
store_layout$walls_mat
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$walls_mat-store_layout$blocked_mat)
test<-make_df(store_layout$walls_mat-store_layout$blocked_mat)
test<-make_df(store_layout$walls_mat-store_layout$blocked_mat, 1)
readRDS("experimental_results/old/tham_layout_1_ascending.rds")
test <- readRDS("experimental_results/old/tham_layout_1_ascending.rds")
plot_output(test, "tham_layout_1_ascending")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_3.pbm")
test<-make_df(store_layout$walls_mat-store_layout$blocked_mat, 1)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_3.pbm")
test<-make_df(store_layout$walls_mat-store_layout$blocked_mat, 1)
store_layout <- read_img_map("store_layout/ideas/tham_3.pbm")
plot_mat(store_layout$cashier_mat)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_3.pbm")
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=42, y=42)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
print(paste("Simulating replicate",i))
results[[i]] <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout, results)
saveRDS(output, "tham_3_cashier_090.rds")
plot_output(test, "tham_3_cashier_090")
plot_output(output, "tham_3_cashier_090")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_4.pbm")
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=42, y=42)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
print(paste("Simulating replicate",i))
results[[i]] <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout, results)
saveRDS(output, "tham_4_cashier_090.rds")
plot_output(output, "tham_4_cashier_090")
