}
place_items <- function(store_layout, storedata, select_positions, order_positions, order_items) {
shelf_mat <- store_layout_ascending$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
# Select 134 shelf positions from possible positions
shelf_positions <- select_positions(shelf_df)
# Insert an item into each shelf position
## Sort positions by increasing y position
shelf_positions<-order_positions(shelf_positions)
## Sort items by increasing GHI
storedata_sorted<-order_items(storedata)
## Bind positions to items
shelf_positions$value <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$value),]
store_layout$target_df<-shelf_positions
return(store_layout)
}
select_positions_random <- function(shelf_df) {
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
return(shelf_positions)
}
order_positions_ascending_y <- function(shelf_positions) {
shelf_positions<-shelf_positions[order(shelf_positions$y),]
return(shelf_positions)
}
order_items_ascending_ghi <- function(storedata) {
storedata_sorted<-storedata[order(storedata$ghi),]
return(storedata_sorted)
}
test_store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_ascending_ghi)
View(test_store_layout)
View(test_store_layout[["target_df"]])
order_positions_descending_y <- function(shelf_positions) {
shelf_positions<-shelf_positions[order(-shelf_positions$y),]
return(shelf_positions)
}
test_store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_descending_y, order_items_ascending_ghi)
View(test_store_layout[["target_df"]])
sample(storedata$item_id)
order_items_random <- function(storedata) {
storedata_sorted <- storedata[sample(storedata$item_id),]
}
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
View(store_layout_random)
View(store_layout_random[["target_df"]])
# Ascending (i.e. more desirable items farther away)
store_layout_ascending <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_ascending_ghi)
img <- read.pnm(example.pbm)
img <- read.pnm("example.pbm")
img@red
plot(img@red)
plot(img)
img <- read.pnm("store_layout/bitmap/original_layout_cleaned.pbm")
plot(img)
plot_mat(img@red)
cashier_in_mat <- img@red[which(img@red==0.2)]
plot_mat(cashier_in_mat)
cashier_in_mat <- img@red[which(img@red==0.2)]
View(img@red)
cashier_in_mat <- img@red[which(img@red==0.3176471)]
cashier_in_mat <- img@red
cashier_in_mat <- img@red * 255
View(cashier_in_mat)
img <- read.pnm("store_layout/bitmap/original_layout_cleaned.pbm")
View(img@red)
test <- img@red[which(img@red==0.2)]
cashier_in_mat[which(cashier_in_mat==1)] <- 0
cashier_in_mat <- img@red
cashier_in_mat[which(cashier_in_mat==1)] <- 0
cashier_in_mat <- cashier_in_mat * 5
plot_mat(cashier_in_mat)
cashier_out_mat <- img@blue
cashier_out_mat[which(cashier_out_mat==1)] <- 0
cashier_out_mat <- cashier_out_mat * 5
plot(cashier_out_mat)
plot_mat(cashier_out_mat)
source('~/Desktop/IMMC/IMMC/simulate.R', echo=TRUE)
source('~/Desktop/IMMC/IMMC/simulate.R', echo=TRUE)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 5
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
View(store_layout)
store_layout[["target_df"]]
View(store_layout[["target_df"]])
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$cashier_mat)
plot_mat(store_layout$cashier_in_mat)
# Pull a store_layout from an image
new_store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
# Pull a store_layout from an image
new_store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
source("simulate.R", local=TRUE)
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
new_store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
plot_mat(store_layout$cashier_in_mat)
plot_mat(new_store_layout$cashier_in_mat)
plot_mat(new_store_layout$cashier_out_mat)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_cleaned.pbm")
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
plot_df(store_layout_random$target_df)
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
plot_df(store_layout_random$target_df)
test <- simulate(store_layout = store_layout_random, storedata=storedata, n_agents = 100, plot=TRUE, from_bitmap = FALSE)
View(test)
img <- read.pnm("store_layout/bitmap/original_layout_blocked.pbm")
blocked_mat <- img@red + img@blue
blocked_mat[which(blocked_mat!=2)]<-0
plot_mat(blocked_mat)
blocked_mat <- img@red + img@blue + img@green
blocked_mat[which(blocked_mat!=2)]<-0
plot_mat(blocked_mat)
img <- read.pnm("store_layout/bitmap/original_layout_blocked.pbm")
blocked_mat <- img@red + img@blue + img@green
blocked_mat[which(blocked_mat!=2)]<-0
plot_mat(blocked_mat)
blocked_mat <- img@red + img@blue + img@green
View(blocked_mat)
blocked_mat[which(blocked_mat!=1.6)]<-0
plot_mat(blocked_mat)
blocked_mat <- blocked_mat / 1.6
plot_mat(blocked_mat)
img <- read.pnm("store_layout/bitmap/original_layout_blocked.pbm")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 5
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$blocked_mat)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 5
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$blocked_mat)
plot_mat(store_layout$cashier_mat)
plot_mat(store_layout$cashier_in_mat)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$cashier_in_mat)
plot_mat(store_layout$cashier_out_mat)
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$blocked_mat)
plot_mat(store_layout$entrance_mat)
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
img <- read.pnm("store_layout/bitmap/original_layout_blocked.pbm")
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$cashier_mat)
plot_mat(store_layout$cashier_in_mat)
plot_mat(store_layout$cashier_out_mat)
plot_mat(store_layout$cashier_in_mat)
plot_mat(store_layout$entrance_mat)
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$entrance_mat)
source("simulate.R", local=TRUE)
# Pull a store_layout from an image
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
store_layout$walls_mat
plot_mat(store_layout$blocked_mat)
plot_mat(store_layout$cashier_mat)
plot_mat(store_layout$cashier_in_mat)
plot_mat(store_layout$cashier_out_mat)
plot_mat(store_layout$entrance_mat)
plot_mat(store_layout$exit_mat)
plot_mat(store_layout$target_df)
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
source("shelfer.R", local=TRUE)
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
source("shelfer.R", local=TRUE)
# Baseline: completely randomised arrangement of items
# Place items into the layout
store_layout_random <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_random)
plot_df(store_layout_random$target_df)
View(storedata)
View(storedata)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
View(store_layout)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
make_df(shelves)
shelves_df <- make_df(shelves, "value")
View(shelves_df)
plot_mat(walls_mat)
plot_mat(store_layout$walls_mat)
store_layout <- read_img_map("store_layout/ideas/tham_2.pbm")
store_layout <- read_img_map("store_layout/ideas/tham_2.pbm")
plot_mat(store_layout$walls_mat)
plot_mat(store_layout$blocked_mat)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
plot_mat(shelves)
make_df_full(plot_mat)
make_df_full(shelves)
test <- make_df_full(shelves)
View(test)
shelves <- test[which(test$value==1),]
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
plot_mat(store_layout$blocked_mat)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
plot_mat(shelves)
test <- make_df_full(shelves)
shelves <- test[which(test$value==1),]
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
plot_mat(store_layout$blocked_mat)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
plot_mat(shelves)
test <- make_df_full(shelves)
shelves <- test[which(test$value==1),]
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
plot_mat(store_layout$blocked_mat)
shelves <- store_layout$walls_mat - store_layout$blocked_mat
plot_mat(shelves)
test <- make_df_full(shelves)
shelves <- test[which(test$value==1),]
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/tham_1.pbm")
store_layout_ascending <- place_items(store_layout, storedata, select_positions_random, order_positions_ascending_y, order_items_ascending_ghi)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
results[[i]] <- simulate(store_layout = store_layout_ascending, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout_ascending, results)
saveRDS(output, "tham_layout_1_ascending.rds")
View(results)
plot_mat(results[[1]][[2]])
plot_mat(results[[1]][[1]])
plot_mat(results[[1]][[2]])
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/derek_alt_6.pbm")
plot_mat(store_layout$cashier_mat)
setwd("~/Desktop/IMMC/IMMC")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/derek_alt_6.pbm")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/derek_alt_6.pbm")
plot_mat(store_layout$cashier_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=44, y=39)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
print(paste("Simulating replicate",i))
results[[i]] <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout, results)
saveRDS(output, "default_derek_alt_6_cashier_090.rds")
plot_output(output, "default_derek_alt_6_cashier_090.rds")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/derek_alt_6.pbm")
plot_mat(store_layout$cashier_mat)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/ideas/derek_alt_6.pbm")
plot_mat(store_layout$cashier_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=23, y=46)
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
print(paste("Simulating replicate",i))
results[[i]] <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=FALSE, from_bitmap = FALSE)
}
output <- list(store_layout, results)
saveRDS(output, "default_derek_alt_6_cashier_090.rds")
plot_output(output, "default_derek_alt_6_cashier_090.rds")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_reps = 10
n_agents = 100
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$cashier_mat)
View(store_layout)
plot_mat(store_layout$walls_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=15, y=44)
results = list()
results = list()
# Run simulation for 5 reps
for(i in 1:n_reps) {
print(paste("Simulating replicate",i))
results[[i]] <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, from_bitmap = FALSE)
}
View(results)
results <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, from_bitmap = FALSE)
View(results_ascending)
View(results)
plot_mat(results[[1]])
write.pnm(results[[1]], file="results.pbm")
result_img = pixmapGrey(results[[1]])
write.pnm(results_img, file="results.pbm")
write.pnm(result_img, file="results.pbm")
simulate_density <- function(store_layout, agent_list, coeff=0.1, plot=FALSE, pixmap=FALSE, name="density_plot", img_w=48, img_h=48) {
density_mat = matrix(0, img_w, img_h)
walls_mat = store_layout[["walls_mat"]]
cashier_in_mat = store_layout[["cashier_in_mat"]]
cashier_out_mat = store_layout[["cashier_out_mat"]]
walls_cashier_in = walls_mat + cashier_out_mat
walls_cashier_out = walls_mat + cashier_in_mat
for(i in 1:length(agent_list)) {
current_agent <- agent_list[[i]]
# Route btw first two targets (entrance to target 1)
n_routes <- length(current_agent) - 1
for(j in 1:n_routes) {
source = current_agent[[j]]
target = current_agent[[j+1]]
if(j == 2) {mg <- SearchMaze2D$new(walls_cashier_in, density_mat, coeff)} else if(j == 3) {mg <- SearchMaze2D$new(walls_cashier_out, density_mat, coeff)} else {mg <- SearchMaze2D$new(walls_mat, density_mat, coeff)}
current_path <- mg$run(source, target)
if (is.null(current_path)) {
current_path <- mg$run(target, source)
}
for(k in current_path) {
density_mat[k[1], k[2]] <- density_mat[k[1], k[2]] + 1
}
if(plot==FALSE) {
} else {
file_name = paste(name,"_", i, "_", j, ".png", sep="")
if(pixmap==FALSE) {
density_df = make_df_full(density_mat)
walls_df = make_df(walls_mat, 1)
p <- ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggsave(plot=p, filename=file_name, width=1, height=1, units="in", dpi=150, device="png")
}else{
density_img = pixmapGrey(density_mat)
write.pnm(density_img, file=file_name)
}
}
if(plot==TRUE & pixmap==FALSE) {
} else if(plot==TRUE & pixmap==TRUE) {
}
}
print(paste("Agent",i,"simulated..."))
}
return(density_mat)
}
source("simulate.R", local=TRUE)
results <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE)
source("simulate.R", local=TRUE)
results <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE)
source("simulate.R", local=TRUE)
results <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_agents = 10
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$walls_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=15, y=44)
results <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_agents = 10
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$walls_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=15, y=44)
results <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE)
results <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE)
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_agents = 10
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$walls_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=15, y=44)
results <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE)
plot_mat(store_layout)
View(store_layout)
plot_mat(store_layout["walls_mat")
plot_mat(store_layout["walls_mat"])
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_agents = 100
store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
plot_mat(store_layout$walls_mat)
store_layout <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=15, y=44)
results <- simulate(store_layout = store_layout, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE)
View(results)
plot_mat(results[[1]])
plot_mat(results[[2]])
plot_mat(store_layout$walls_mat)
plot_mat(store_layout["walls_mat"])
store_layout_3 <- read_img_map("store_layout/ideas/derek_3.pbm")
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_agents = 100
default_store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
# Default Layout, Euclidean cashier loss
store_layout_1 <- place_items(default_store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=15, y=44)
result_1 <- simulate(store_layout = store_layout_1, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE, nname = "default_euclidean_cashier_loss")
result_1 <- simulate(store_layout = store_layout_1, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE, name = "default_euclidean_cashier_loss")
result_1[[3]]
store_layout_2 <- read_img_map("store_layout/ideas/derek_3.pbm")
store_layout_2 <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=15, y=44)
store_layout_2 <- read_img_map("store_layout/ideas/derek_3.pbm")
View(default_store_layout)
plot_mat(store_layout_2["walls_mat"])
store_layout_2 <- read_img_map("store_layout/ideas/derek_3.pbm")
plot_mat(store_layout_2["walls_mat"])
store_layout_2 <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=46, y=44)
plot_mat(store_layout_3["walls_mat"])
# Optimised Layout, Euclidean cashier loss
store_layout_3 <- read_img_map("store_layout/ideas/tham_3.pbm")
plot_mat(store_layout_3["walls_mat"])
source("simulate.R", local=TRUE)
source("shelfer.R", local=TRUE)
n_agents = 100
# Default Layout, Euclidean cashier loss
default_store_layout <- read_img_map("store_layout/bitmap/original_layout_blocked.pbm")
store_layout_1 <- place_items(default_store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=15, y=44)
result_1 <- simulate(store_layout = store_layout_1, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE, name = "default_euclidean_cashier_loss")
# Arranged Layout, Euclidean cashier loss
store_layout_2 <- read_img_map("store_layout/ideas/derek_3.pbm")
plot_mat(store_layout_2["walls_mat"])
store_layout_2 <- place_items(store_layout, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=46, y=44)
result_2 <- simulate(store_layout = store_layout_2, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE, name = "arranged_euclidean_cashier_loss")
# Optimised Layout, Euclidean cashier loss
store_layout_3 <- read_img_map("store_layout/ideas/tham_3.pbm")
plot_mat(store_layout_3["walls_mat"])
store_layout_3 <- place_items(store_layout_3, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=41, y=44)
result_3 <- simulate(store_layout = store_layout_3, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE, name = "optimised_euclidean_cashier_loss")
store_layout_2 <- read_img_map("store_layout/ideas/derek_3.pbm")
plot_mat(store_layout_2["walls_mat"])
store_layout_2 <- place_items(store_layout_2, storedata, select_positions_random, order_positions_euclidean, order_items_ascending_ghi, threshold=0.9, x=46, y=44)
result_2 <- simulate(store_layout = store_layout_2, storedata=storedata, n_agents = n_agents, plot=TRUE, pixmap=TRUE, from_bitmap = FALSE, name = "arranged_euclidean_cashier_loss")
save_mat(mat, name) {
file_name = paste("walls","_",name,".pbm", sep="")
img = pixmapGrey(mat)
write.pnm(img, file=file_name)
}
save_mat(mat, name) {
file_name = paste("walls","_",name,".pbm", sep="")
img = pixmapGrey(mat)
write.pnm(img, file=file_name)
}
save_mat <- function(mat, name) {
file_name = paste("walls","_",name,".pbm", sep="")
img = pixmapGrey(mat)
write.pnm(img, file=file_name)
}
source("simulate.R", local=TRUE)
save_mat(store_layout_1$walls_mat)
save_mat(store_layout_1$walls_mat, name="default_euclidean_cashier_loss")
save_mat <- function(mat, name) {
file_name = paste(name,".pbm", sep="")
img = pixmapGrey(mat)
write.pnm(img, file=file_name)
}
save_mat(store_layout_1$walls_mat, name="walls_default_euclidean_cashier_loss")
save_mat(store_layout_1$cashier_mat, name="cashier_default_euclidean_cashier_loss")
save_mat(store_layout_2$walls_mat, name="walls_arranged_euclidean_cashier_loss")
save_mat(store_layout_2$cashier_mat, name="cashier_arranged_euclidean_cashier_loss")
save_mat(store_layout_3$walls_mat, name="walls_arranged_optimised_cashier_loss")
save_mat(store_layout_3$cashier_mat, name="cashier_arranged_optimised_cashier_loss")
