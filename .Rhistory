x <- pixmapRGB(rep(1:5, 3), nrow=4)
plot(x)
print(x)
x <- pixmapRGB(img@red)
plot(x)
x <- pixmapRGB(c(img@red, img@green, img@blue))
plot(x)
print(x)
x <- pixmapRGB(c(img@red, img@green, img@blue))
test_array <- array(0, dim=c(48,48,3))
test_array <- array(c(img@red, img@green, img@blue), dim=c(48,48,3))
plot(x)
test <- pixmap(test_array)
test <- pixmapRGB(test_array)
plot(test)
test_red <- walls_mat + entrance_mat
test_green <- walls_mat + cashier_mat
test_blue <- walls_mat + cashier_mat + exit_mat
test_array <- array(c(test_red, test_green, test_blue), dim=c(48,48,3))
test <- pixmapRGB(test_array)
plot(test)
test_array <- array(c(test_red, test_green, test_blue), dim=c(48,48,3))
test <- pixmapRGB(test_array)
plot(test)
View(target_mat)
test_red <- walls_mat + entrance_mat
test_green <- walls_mat + cashier_mat - target_mat
test_blue <- walls_mat + cashier_mat + exit_mat
test_array <- array(c(test_red, test_green, test_blue), dim=c(48,48,3))
test <- pixmapRGB(test_array)
plot(test)
test_red <- walls_mat + entrance_mat
test_green <- walls_mat + cashier_mat
test_blue <- walls_mat + cashier_mat + exit_mat
test_array <- array(c(test_red, test_green, test_blue), dim=c(48,48,3))
test <- pixmapRGB(test_array)
plot(test)
View(test_green)
test_target <- test_green - target_mat
View(test_target)
test_target <- (test_green*255 - target_mat)/255
test_green <- ((walls_mat + cashier_mat)*255 - target_mat)/255
test_array <- array(c(test_red, test_green, test_blue), dim=c(48,48,3))
test <- pixmapRGB(test_array)
plot(test)
plot(test@green)
View(test@green)
green_minus_target <- test@green
green_minus_target <- green_minus_target[which(green_minus_target != 0)] <- 1
green_minus_target <- test@green
green_minus_target <- green_minus_target[which(green_minus_target != 0),] <- 1
View(green_minus_target)
green_minus_target <- test@green
green_minus_target[which(green_minus_target != 0),] <- 1
green_minus_target <- test@green
green_minus_target[which(green_minus_target != 0)] <- 1
test_array <- array(c(test_red, green_minus_target, test_blue), dim=c(48,48,3))
test <- pixmapRGB(test_array)
plot(test)
target_df[1, 1:2]
target_df_1[1, 1:2]
as.numeric(target_df_1[1, 1:2])
target_df <- store_layout$target_df
target_mat <- matrix(0, img_w, img_h)
for(row in 1:nrow(target_df)) {
coord = as.numeric(target_df[row, 1:3])
target_mat[coord[1], coord[2]] <- coord[3]
}
View(target_mat)
reverse_encode <- function(store_layout, img_w=48, img_h=48) {
walls_mat <- store_layout$walls_mat
entrance_mat <- store_layout$entrance_mat
exit_mat <- store_layout$exit_mat
target_df <- store_layout$target_df
target_mat <- matrix(0, img_w, img_h)
for(row in 1:nrow(target_df)) {
coord = as.numeric(target_df[row, 1:3])
target_mat[coord[1], coord[2]] <- coord[3]
}
img_red <- walls_mat + entrance_mat
img_green <- ((walls_mat + cashier_mat)*255 - target_mat)/255
img_blue <- walls_mat + cashier_mat + exit_mat
img_array <- array(c(img_red, img_green, img_blue), dim=c(48,48,3))
img <- pixmapRGB(img_array)
return(img)
}
test <- reverse_encode(store_layout)
plot(test)
read_img_map <- function(img_path) {
img <- read.pnm(img_path)
#ffffff = Walls (all non-traversable tiles, including shelves and walls)
green_minus_target = img@green
green_minus_target[which(green_minus_target != 0)] <- 1
walls_mat <- img@red + green_minus_target + img@blue
walls_mat[which(walls_mat != 3)] <- 0
walls_mat <- walls_mat/3
#00ffff = Cashiers (for now, the second target for all agents)
cashier_mat <- img@green + img@blue + img@red
cashier_mat[which(cashier_mat != 2)] <- 0
cashier_mat <- cashier_mat/2
#ff0000 = Entrances (possible source points)
entrance_mat <- img@red - walls_mat
#0000ff = Exits (final target for all agents)
exit_mat <- img@blue - walls_mat - cashier_mat
#00xx00 = Target objects (for now, the first target for all agents)
# @Keane: Encode target objects by converting their numerical item_id to hex, then setting that to be the colour of the green channel
# convert back to 0-255 encoding
target_mat <- img@green*255
target_mat[which(target_mat == 255)] <- 0
target_df <- make_df_full(target_mat)
target_df <- target_df[which(target_df$value != 0),]
target_df <- target_df[order(target_df$item_id),]
target_df$ghi <- storedata$ghi
store_layout <- list("walls_mat" = walls_mat, "cashier_mat" = cashier_mat, "entrance_mat" = entrance_mat, "exit_mat" = exit_mat, "target_df" = target_df)
return(store_layout)
}
write.pnm(test, file="test.pbm")
test_layout <- read_img_map("test.pbm")
img <- read.pnm("test.pbm")
#ffffff = Walls (all non-traversable tiles, including shelves and walls)
green_minus_target = img@green
green_minus_target[which(green_minus_target != 0)] <- 1
walls_mat <- img@red + green_minus_target + img@blue
walls_mat[which(walls_mat != 3)] <- 0
walls_mat <- walls_mat/3
plot_mat <- function(mat) {
df = make_df_full(mat)
p <- ggplot(df, aes(x=x,y=y,fill=value)) +
geom_tile() +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
}
plot_mat(walls_mat)
plot_mat <- function(mat) {
df = make_df_full(mat)
ggplot(df, aes(x=x,y=y,fill=value)) +
geom_tile() +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
}
plot_mat(walls_mat)
#00ffff = Cashiers (for now, the second target for all agents)
cashier_mat <- img@green + img@blue + img@red
cashier_mat[which(cashier_mat != 2)] <- 0
cashier_mat <- cashier_mat/2
plot_mat(cashier_mat)
#ff0000 = Entrances (possible source points)
entrance_mat <- img@red - walls_mat
plot_mat(entrance_mat)
#0000ff = Exits (final target for all agents)
exit_mat <- img@blue - walls_mat - cashier_mat
plot_mat(exit_mat)
#00xx00 = Target objects (for now, the first target for all agents)
# @Keane: Encode target objects by converting their numerical item_id to hex, then setting that to be the colour of the green channel
# convert back to 0-255 encoding
target_mat <- img@green*255
target_mat[which(target_mat == 255)] <- 0
plot_mat(target_mat)
target_df <- make_df_full(target_mat)
target_df <- target_df[which(target_df$value != 0),]
target_df <- target_df[order(target_df$item_id),]
target_df <- target_df[order(target_df$value),]
target_df$ghi <- storedata$ghi
View(target_df)
#00xx00 = Target objects (for now, the first target for all agents)
# @Keane: Encode target objects by converting their numerical item_id to hex, then setting that to be the colour of the green channel
# convert back to 0-255 encoding
target_mat <- img@green*255
target_mat[which(target_mat == 255)] <- 0
target_df <- make_df_full(target_mat)
target_df$value = 255 - target_df$value
#00xx00 = Target objects (for now, the first target for all agents)
# @Keane: Encode target objects by converting their numerical item_id to hex, then setting that to be the colour of the green channel
# convert back to 0-255 encoding
target_mat <- img@green*255
target_mat[which(target_mat == 255)] <- 0
target_df <- make_df_full(target_mat)
target_df <- target_df[which(target_df$value != 0),]
target_df$value = 255 - target_df$value
View(target_df_1)
target_df <- target_df[order(target_df$value),]
View(target_df)
target_df$ghi <- storedata$ghi
read_img_map <- function(img_path) {
img <- read.pnm(img_path)
#ffffff = Walls (all non-traversable tiles, including shelves and walls)
green_minus_target = img@green
green_minus_target[which(green_minus_target != 0)] <- 1
walls_mat <- img@red + green_minus_target + img@blue
walls_mat[which(walls_mat != 3)] <- 0
walls_mat <- walls_mat/3
#00ffff = Cashiers (for now, the second target for all agents)
cashier_mat <- img@green + img@blue + img@red
cashier_mat[which(cashier_mat != 2)] <- 0
cashier_mat <- cashier_mat/2
#ff0000 = Entrances (possible source points)
entrance_mat <- img@red - walls_mat
#0000ff = Exits (final target for all agents)
exit_mat <- img@blue - walls_mat - cashier_mat
#00xx00 = Target objects (for now, the first target for all agents)
# @Keane: Encode target objects by converting their numerical item_id to hex, then setting that to be the colour of the green channel
# convert back to 0-255 encoding
target_mat <- img@green*255
target_mat[which(target_mat == 255)] <- 0
target_df <- make_df_full(target_mat)
target_df <- target_df[which(target_df$value != 0),]
target_df$value = 255 - target_df$value
target_df <- target_df[order(target_df$value),]
target_df$ghi <- storedata$ghi
store_layout <- list("walls_mat" = walls_mat, "cashier_mat" = cashier_mat, "entrance_mat" = entrance_mat, "exit_mat" = exit_mat, "target_df" = target_df)
return(store_layout)
}
plot_mat(target_mat)
plot_mat(walls_mat)
test_layout <- read_img_map("test.pbm")
View(test_layout)
plot_mat(test_layout$walls_mat)
plot_mat(test_layout$cashier_mat)
plot_mat(test_layout$entrance_mat)
plot_mat(test_layout$exit_mat)
test_layout[["target_df"]]
test_agents <- create_agent_list(test_layout, 100)
create_agent_list <- function(store_layout, n_agents) {
walls_df <- make_df(store_layout[["walls_mat"]], 1)
cashier_df <- make_df(store_layout[["cashier_mat"]], 1)
entrance_df <- make_df(store_layout[["entrance_mat"]], 1)
exit_df <- make_df(store_layout[["exit_mat"]], 1)
target_df <- store_layout[["target_df"]]
# we sample with replacement for each step to generate dfs of targets for all agents
entrance_tiles <- entrance_df[sample(nrow(entrance_df), size=n_agents, replace = TRUE),]
target_tiles <- target_df[sample(target_df$value, prob=target_df$ghi, replace=TRUE, size=n_agents),]
cashier_tiles <- cashier_df[sample(nrow(cashier_df), size=n_agents, replace = TRUE),]
exit_tiles <- exit_df[sample(nrow(exit_df), size=n_agents, replace = TRUE),]
agent_list = list()
for(i in 1:n_agents) {
entrance_coords = as.numeric(entrance_tiles[i,])
target_coords = as.numeric(target_tiles[i,1:2])
cashier_coords = as.numeric(cashier_tiles[i,])
exit_coords = as.numeric(exit_tiles[i,])
agent_list[[i]] = list(entrance_coords, target_coords, cashier_coords, exit_coords)
}
return(agent_list)
}
test_agents <- create_agent_list(test_layout, 100)
View(test_agents)
simulate_density <- function(store_layout, agent_list, coeff=0.1, plot=FALSE, name="density_plot") {
density_mat = matrix(0, img_w, img_h)
walls_mat = store_layout[["walls_mat"]]
for(i in 1:length(agent_list)) {
current_agent <- agent_list[[i]]
# Route btw first two targets (entrance to target 1)
n_routes <- length(current_agent) - 1
for(j in 1:n_routes) {
source = current_agent[[j]]
target = current_agent[[j+1]]
mg <- SearchMaze2D$new(walls_mat, density_mat, coeff)
current_path <- mg$run(source, target)
if (is.null(current_path)) {
current_path <- mg$run(target, source)
}
for(k in current_path) {
density_mat[k[1], k[2]] <- density_mat[k[1], k[2]] + 1
}
if(plot==TRUE) {
file_name = paste(name,"_", i, "_", j, ".png", sep="")
density_df = make_df_full(density_mat)
p <- ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggsave(plot=p, filename=file_name, width=1, height=1, units="in", dpi=150, device="png")
}
}
}
return(density_mat)
}
test_density_mat <- simulate_density(test_layout, test_agents, plot=TRUE)
# Some loss functions
get_loss <- function(densities) {
loss = sum(densities)
return(loss)
}
get_loss_sqrt <- function(densities) {
loss = sum(sqrt(densities))
return(loss)
}
get_loss_log <- function(densities) {
loss = sum(log(densities+1))
return(loss)
}
norm_loss <- function(loss, get_loss) {
loss_max = get_loss(worst_case)
return(loss/loss_max)
}
simulate <- function(pbm_path, storedata, n_agents=100, loss_fn=get_loss, max_routes=3, coeff=0.1, reps=5, plot=FALSE, name="density_plot") {
img <- read.pnm(pbm_path)
img_w = img@size[1]
img_h = img@size[2]
# This value is technically not necessarily the same for all agents, but we're assuming it is
store_layout <- read_img_map(img)
agent_list <- create_agent_list(store_layout, n_agents)
density_mat <- simulate_density(store_layout, agent_list, coeff, plot, name)
density_df = make_df_full(density_mat)
worst_case = rep(n_agents*max_routes, img_h*img_w/2)
loss <- norm_loss(loss_fn(density_df$value), loss_fn)
output = list(density_mat, loss)
return(output)
}
simulate("test.pbm", storedata, plot=TRUE)
read.pnm("test.pbm")
simulate(pbm_path = "test.pbm", storedata, plot=TRUE)
pbm_path = "test.pbm"
img <- read.pnm(pbm_path)
img_w = img@size[1]
img_h = img@size[2]
dim(img)
dim(store_layout$walls_mat)
simulate <- function(pbm_path, storedata, n_agents=100, loss_fn=get_loss, max_routes=3, coeff=0.1, reps=5, plot=FALSE, name="density_plot") {
# This value is technically not necessarily the same for all agents, but we're assuming it is
store_layout <- read_img_map(img)
img_w = dim(store_layout$walls_mat)[0]
img_h = dim(store_layout$walls_mat)[1]
agent_list <- create_agent_list(store_layout, n_agents)
density_mat <- simulate_density(store_layout, agent_list, coeff, plot, name)
density_df = make_df_full(density_mat)
worst_case = rep(n_agents*max_routes, img_h*img_w/2)
loss <- norm_loss(loss_fn(density_df$value), loss_fn)
output = list(density_mat, loss)
return(output)
}
test <- simulate("test.pbm", storedata, plot=TRUE)
simulate <- function(pbm_path, storedata, n_agents=100, loss_fn=get_loss, max_routes=3, coeff=0.1, reps=5, plot=FALSE, name="density_plot") {
# This value is technically not necessarily the same for all agents, but we're assuming it is
store_layout <- read_img_map(pbm_path)
img_w = dim(store_layout$walls_mat)[0]
img_h = dim(store_layout$walls_mat)[1]
agent_list <- create_agent_list(store_layout, n_agents)
density_mat <- simulate_density(store_layout, agent_list, coeff, plot, name)
density_df = make_df_full(density_mat)
worst_case = rep(n_agents*max_routes, img_h*img_w/2)
loss <- norm_loss(loss_fn(density_df$value), loss_fn)
output = list(density_mat, loss)
return(output)
}
test <- simulate("test.pbm", storedata, plot=TRUE)
source("simulate.R")
test <- simulate("test.pbm", storedata, plot=TRUE)
simulate_density <- function(store_layout, agent_list, coeff=0.1, plot=FALSE, name="density_plot", img_w=img_w, img_h=img_h) {
density_mat = matrix(0, img_w, img_h)
walls_mat = store_layout[["walls_mat"]]
for(i in 1:length(agent_list)) {
current_agent <- agent_list[[i]]
# Route btw first two targets (entrance to target 1)
n_routes <- length(current_agent) - 1
for(j in 1:n_routes) {
source = current_agent[[j]]
target = current_agent[[j+1]]
mg <- SearchMaze2D$new(walls_mat, density_mat, coeff)
current_path <- mg$run(source, target)
if (is.null(current_path)) {
current_path <- mg$run(target, source)
}
for(k in current_path) {
density_mat[k[1], k[2]] <- density_mat[k[1], k[2]] + 1
}
if(plot==TRUE) {
file_name = paste(name,"_", i, "_", j, ".png", sep="")
density_df = make_df_full(density_mat)
p <- ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggsave(plot=p, filename=file_name, width=1, height=1, units="in", dpi=150, device="png")
}
}
}
return(density_mat)
}
test <- simulate("test.pbm", storedata, plot=TRUE)
source("simulate.R")
test <- simulate("test.pbm", storedata, plot=TRUE)
simulate <- function(pbm_path, storedata, n_agents=100, loss_fn=get_loss, max_routes=3, coeff=0.1, reps=5, plot=FALSE, name="density_plot") {
# This value is technically not necessarily the same for all agents, but we're assuming it is
store_layout <- read_img_map(pbm_path)
w = dim(store_layout$walls_mat)[0]
h = dim(store_layout$walls_mat)[1]
agent_list <- create_agent_list(store_layout, n_agents)
density_mat <- simulate_density(store_layout, agent_list, coeff, plot, name, w, h)
density_df = make_df_full(density_mat)
worst_case = rep(n_agents*max_routes, img_h*img_w/2)
loss <- norm_loss(loss_fn(density_df$value), loss_fn)
output = list(density_mat, loss)
return(output)
}
test <- simulate("test.pbm", storedata, plot=TRUE)
matrix(0,48,48)
source("simulate.R")
test <- simulate("test.pbm", storedata, plot=TRUE)
source("simulate.R")
test <- simulate("test.pbm", storedata, plot=TRUE)
source("simulate.R")
test <- simulate("test.pbm", storedata, plot=TRUE)
source("simulate.R")
test <- simulate("test.pbm", storedata, plot=TRUE)
test <- simulate("test.pbm", storedata, n_agents = 10, plot=TRUE)
simulate <- function(pbm_path, storedata, n_agents=100, loss_fn=get_loss, max_routes=3, coeff=0.1, reps=5, plot=FALSE, name="density_plot") {
# This value is technically not necessarily the same for all agents, but we're assuming it is
store_layout <- read_img_map(pbm_path)
img_w = dim(store_layout$walls_mat)[0]
img_h = dim(store_layout$walls_mat)[1]
agent_list <- create_agent_list(store_layout, n_agents)
density_mat <- simulate_density(store_layout, agent_list, coeff, plot, name)
density_df = make_df_full(density_mat)
worst_case = rep(n_agents*max_routes, img_w*img_h/2)
loss <- norm_loss(loss_fn(density_df$value), loss_fn)
output = list(density_mat, loss)
return(output)
}
source("simulate.R")
test <- simulate("test.pbm", storedata, n_agents = 10, plot=TRUE)
simulate <- function(pbm_path, storedata, n_agents=100, loss_fn=get_loss, max_routes=3, coeff=0.1, reps=5, plot=FALSE, name="density_plot") {
# This value is technically not necessarily the same for all agents, but we're assuming it is
store_layout <- read_img_map(pbm_path)
img_w = dim(store_layout$walls_mat)[0]
print(img_w)
img_h = dim(store_layout$walls_mat)[1]
agent_list <- create_agent_list(store_layout, n_agents)
density_mat <- simulate_density(store_layout, agent_list, coeff, plot, name)
density_df = make_df_full(density_mat)
worst_case = rep(n_agents*max_routes, img_w*img_h/2)
loss <- norm_loss(loss_fn(density_df$value), loss_fn)
output = list(density_mat, loss)
return(output)
}
test <- simulate("test.pbm", storedata, n_agents = 10, plot=TRUE)
simulate <- function(pbm_path, storedata, n_agents=100, loss_fn=get_loss, max_routes=3, coeff=0.1, reps=5, plot=FALSE, name="density_plot") {
# This value is technically not necessarily the same for all agents, but we're assuming it is
store_layout <- read_img_map(pbm_path)
return(store_layout)
img_w = dim(store_layout$walls_mat)[0]
print(img_w)
img_h = dim(store_layout$walls_mat)[1]
agent_list <- create_agent_list(store_layout, n_agents)
density_mat <- simulate_density(store_layout, agent_list, coeff, plot, name)
density_df = make_df_full(density_mat)
worst_case = rep(n_agents*max_routes, img_w*img_h/2)
loss <- norm_loss(loss_fn(density_df$value), loss_fn)
output = list(density_mat, loss)
return(output)
}
test <- simulate("test.pbm", storedata, n_agents = 10, plot=TRUE)
View(test)
dim(store_layout$walls_mat)[0]
dim(test$walls_mat)[0]
dim(test$walls_mat)[1]
source("simulate.R")
test <- simulate("test.pbm", storedata, n_agents = 10, plot=TRUE)
source("simulate.R")
test <- simulate("test.pbm", storedata, n_agents = 10, plot=TRUE)
source("simulate.R")
test <- simulate("test.pbm", storedata, n_agents = 10, plot=TRUE)
simulate <- function(pbm_path, storedata, n_agents=100, loss_fn=get_loss, max_routes=3, coeff=0.1, reps=5, plot=FALSE, name="density_plot") {
# This value is technically not necessarily the same for all agents, but we're assuming it is
store_layout <- read_img_map(pbm_path)
img_w = dim(store_layout$walls_mat)[1]
print(img_w)
img_h = dim(store_layout$walls_mat)[2]
print(img_h)
agent_list <- create_agent_list(store_layout, n_agents)
density_mat <- simulate_density(store_layout, agent_list, coeff, plot, name, img_w, img_h)
density_df = make_df_full(density_mat)
worst_case = rep(n_agents*max_routes, img_w*img_h/2)
loss <- norm_loss(loss_fn(density_df$value), loss_fn)
output = list(density_mat, loss)
return(output)
}
source("simulate.R")
test <- simulate("test.pbm", storedata, n_agents = 10, plot=TRUE)
source("simulate.R")
test <- simulate("test.pbm", storedata, n_agents = 5, plot=TRUE)
View(test)
test[[1]]
plot_mat(test[[1]])
source('~/Desktop/IMMC/IMMC/example.R')
source('~/Desktop/IMMC/IMMC/example.R')
source('~/Desktop/IMMC/IMMC/example.R', echo=TRUE)
