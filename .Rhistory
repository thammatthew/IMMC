get_monetary_loss(c(44,27))
get_monetary_loss(c(44,27), total_ghi)
get_monetary_loss <- function(coord, total_ghi) {
density = density_df[which(density_df$y==coord[1] & density_df$x==coord[2]),"value"]
print(density)
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
if(item$value == 0) {next}
print(item)
value_lost = value_lost + (density/1000) * discounted_price * item$frag * item$qty * (item$ghi / total_ghi)
}
return(value_lost)
}
get_monetary_loss(c(44,27), total_ghi)
get_monetary_loss <- function(coord, total_ghi) {
density = density_df[which(density_df$y==coord[1] & density_df$x==coord[2]),"value"]
print(density)
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
if(item$value == 0) {next}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * item$qty * (item$ghi / total_ghi)
}
return(value_lost)
}
get_monetary_loss(c(44,27), total_ghi)
View(storedata)
storedata[1,]
source('~/Desktop/IMMC/IMMC/storedata.R', echo=TRUE)
get_monetary_loss(c(44,27), total_ghi)
item_df_1$frag <- c(rev(storedata$frag), rep(0, nrow(item_df_1)-length(storedata$frag)))
item_df_1$ghi <- c(rev(storedata$ghi), rep(0, nrow(item_df_1)-length(storedata$ghi)))
item_df_1$discounted_price <- c(rev(storedata$discounted_price), rep(0, nrow(item_df_1)-length(storedata$discounted_price)))
item_df_1$qty <- c(rev(storedata$qty), rep(0, nrow(item_df_1)-length(storedata$qty)))
get_monetary_loss <- function(coord, total_ghi) {
density = density_df[which(density_df$y==coord[1] & density_df$x==coord[2]),"value"]
print(density)
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
if(item$value == 0) {next}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty - (n_agents * (item$ghi / total_ghi)))
}
return(value_lost)
}
get_monetary_loss(c(44,27), total_ghi)
get_monetary_loss(c(44,27), total_ghi, 5)
n_agents = 5
get_monetary_loss(c(44,27), total_ghi, n_agents)
get_monetary_loss <- function(coord, total_ghi, n_agents) {
density = density_df[which(density_df$y==coord[1] & density_df$x==coord[2]),"value"]
print(density)
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
if(item$value == 0) {next}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty - (n_agents * (item$ghi / total_ghi)))
}
return(value_lost)
}
get_monetary_loss(c(44,27), total_ghi, n_agents)
get_monetary_loss <- function(coord, total_ghi, n_agents) {
density = density_df[which(density_df$y==coord[1] & density_df$x==coord[2]),"value"]
print(density)
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
if(item$value == 0) {next}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
return(value_lost)
}
start_time <- Sys.time()
get_monetary_loss(c(44,27), total_ghi, n_agents)
end_time <- Sys.time()
end_time - start_time
total_ghi = sum(storedata$ghi)
n_agents = 100
start_time <- Sys.time()
get_monetary_loss(c(44,27), total_ghi, n_agents)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
get_monetary_loss(c(44,27), total_ghi, n_agents)
end_time <- Sys.time()
end_time - start_time
get_monetary_loss <- function(coord, total_ghi, n_agents) {
density = density_df[which(density_df$y==coord[1] & density_df$x==coord[2]),"value"]
print(density)
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
if(item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3]==0) {next} else {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
return(value_lost)
}
total_ghi = sum(storedata$ghi)
n_agents = 100
start_time <- Sys.time()
get_monetary_loss(c(44,27), total_ghi, n_agents)
end_time <- Sys.time()
loss_mat <- matrix(0, nrow=48, ncol=48)
apply(density_df,1,print)
get_monetary_loss <- function(row, item_df, total_ghi, n_agents) {
coord = row[1:2]
density = row[3]
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
if(item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3]==0) {next} else {
item <- item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
return(value_lost)
}
apply(density_df[1:3,],1,print)
test <- sapply(density_df[1:3,],1,print)
test <- apply(density_df[1:3,],1,print)
View(test)
test <- density_df[1,]
get_monetary_loss(test, item_df_1, total_ghi, n_agents)
row <- density_df[1,]
coord = row[1:2]
density = row[3]
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
if(item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3]==0) {next} else {
item <- item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
for(i in 1:nrow(adj)) {
if(item_df_1[which(item_df_1_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3]==0) {next} else {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
for(i in 1:nrow(adj)) {
if(item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3]==0) {next} else {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
View(adj)
for(i in 1:nrow(adj)) {
if(i[1]=0 | i[2]=0 | i[1]>48 | i[2]) {next}
if(item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3]==0) {next} else {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
for(i in 1:nrow(adj)) {
if(i[1]=0 | i[2]=0 | i[1]>48 | i[2]) {next}
print(i)
}
for(i in 1:nrow(adj)) {
if(i[1]=0 | i[2]=0 | i[1]>48 | i[2]) {next}
print(i)
}
test <- apply(density_df[1:3,],1,)
for(i in 1:nrow(adj)) {
if(i[1]=0 | i[2]=0 | i[1]>48 | i[2]) {next} else {
print(i)
}
}
for(i in 1:nrow(adj)) {
if(i[1]=0 | i[2]=0 | i[1]>48 | i[2]) next
print(i)
}
for(i in 1:nrow(adj)) {
}
for(i in 1:nrow(adj)) {
if(i[1]=0 | i[2]=0 | i[1]>48 | i[2]>48) {next}
print(i)
}
for(i in 1:nrow(adj)) {
if(i[1]=0 | i[2]=0 | i[1]>48 | i[2]>48) {print(i)}
}
for(i in 1:nrow(adj)) {
if(i[1]==0 | i[2]==0 | i[1]>48 | i[2]>48) {print(i)}
}
for(i in 1:nrow(adj)) {
if(i[1]==0 | i[2]==0 | i[1]>48 | i[2]>48) {next} else {print(i)}
}
for(i in 1:nrow(adj)) {
print(i)
}
for(i in 1:nrow(adj)) {
print(adj[i,])
}
if(adj[i,][1]==0 | adj[i,][2]==0 | adj[i,][1]>48 | adj[i,][2]>48) {next} else {print(i)}
for(i in 1:nrow(adj)) {
if(adj[i,][1]==0 | adj[i,][2]==0 | adj[i,][1]>48 | adj[i,][2]>48) {next} else {print(i)}
}
for(i in 1:nrow(adj)) {
if(adj[i,][1]==0 | adj[i,][2]==0 | adj[i,][1]>48 | adj[i,][2]>48) {next} else {print(adj[i,])}
}
for(i in 1:nrow(adj)) {
if(adj[i,][1]==0 | adj[i,][2]==0 | adj[i,][1]>48 | adj[i,][2]>48) {next}
if(item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3]==0) {next} else {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
get_monetary_loss <- function(row, item_df, total_ghi, n_agents) {
coord = row[1:2]
density = row[3]
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
if(adj[i,][1]==0 | adj[i,][2]==0 | adj[i,][1]>48 | adj[i,][2]>48) {next}
if(item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3]==0) {next} else {
item <- item_df_1[which(item_df_1$y==adj[i,1] & item_df_1$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
return(value_lost)
}
get_monetary_loss(row)
row <- density_df[1292,]
View(row)
get_monetary_loss(row)
get_monetary_loss(row, item_df, total_ghi, n_agents)
test <- get_monetary_loss(row, item_df, total_ghi, n_agents)
View(test)
test <- get_monetary_loss(row, item_df_1, total_ghi, n_agents)
test <- apply(density_df[1:3,],1,)
test <- apply(density_df[1:3,],1,get_monetary_loss, item_df=item_df_1, total_ghi=total_ghi, n_agents=n_agents)
test <- apply(density_df,1,get_monetary_loss, item_df=item_df_1, total_ghi=total_ghi, n_agents=n_agents)
loss_mat <- matrix(0, nrow=48, ncol=48)
loss_mat[] <- apply(density_df,1,get_monetary_loss, item_df=item_df_1, total_ghi=total_ghi, n_agents=n_agents)
plot_mat(loss_mat)
plot_mat(density_mat)
plot_mat(item_mat)
plot_mat(loss_mat)
item_df <- test_store_layout$target_df
View(item_df)
item_df$frag <- rev(storedata$frag)
item_df$ghi <- rev(storedata$ghi)
item_df$discounted_price <- rev(storedata$discounted_price)
item_df$qty <- rev(storedata$qty)
get_monetary_loss <- function(row, item_df, total_ghi, n_agents) {
coord = row[1:2]
density = row[3]
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
if(adj[i,][1]==0 | adj[i,][2]==0 | adj[i,][1]>48 | adj[i,][2]>48) {next}
if(item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3]==0) {next} else {
item <- item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
return(value_lost)
}
loss_mat <- matrix(0, nrow=48, ncol=48)
loss_mat[] <- apply(density_df,1,get_monetary_loss, item_df=item_df, total_ghi=total_ghi, n_agents=n_agents)
item_df <- make_df_full(item_mat)
item_df <- item_df[order(-item_df$value),]
item_df$frag <- c(rev(storedata$frag), rep(0, nrow(item_df)-length(storedata$frag)))
item_df$ghi <- c(rev(storedata$ghi), rep(0, nrow(item_df)-length(storedata$ghi)))
item_df$discounted_price <- c(rev(storedata$discounted_price), rep(0, nrow(item_df)-length(storedata$discounted_price)))
item_df$qty <- c(rev(storedata$qty), rep(0, nrow(item_df)-length(storedata$qty)))
get_monetary_loss <- function(row, item_df, total_ghi, n_agents) {
coord = row[1:2]
density = row[3]
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
if(adj[i,][1]==0 | adj[i,][2]==0 | adj[i,][1]>48 | adj[i,][2]>48) {next}
if(item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3]==0) {next} else {
item <- item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3:7]
}
print(item)
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
return(value_lost)
}
loss_mat[] <- apply(density_df,1,get_monetary_loss, item_df=item_df_1, total_ghi=total_ghi, n_agents=n_agents)
get_monetary_loss <- function(row, item_df, total_ghi, n_agents) {
coord = row[1:2]
density = row[3]
if(density == 0) {return}
adj<-c()
for(i in 1:-1)
for(j in 1:-1)
if(i!=0 || j !=0)
adj<-rbind(adj,coord+c(i,j))
value_lost<-0
for(i in 1:nrow(adj)) {
if(adj[i,][1]==0 | adj[i,][2]==0 | adj[i,][1]>48 | adj[i,][2]>48) {next}
if(item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3]==0) {next} else {
item <- item_df[which(item_df$y==adj[i,1] & item_df$x==adj[i,2]),3:7]
}
value_lost = value_lost + (density/1000) * item$discounted_price * item$frag * (item$qty + (item$qty - (n_agents * (item$ghi / total_ghi))))/2
}
return(value_lost)
}
loss_mat <- matrix(0, nrow=48, ncol=48)
loss_mat[] <- apply(density_df,1,get_monetary_loss, item_df=item_df_1, total_ghi=total_ghi, n_agents=n_agents)
simulate <- function(pbm_path, store_layout = NULL, storedata, n_agents=100, loss_fn=get_loss, max_routes=3, coeff=0.1, reps=5, plot=FALSE, name="density_plot", from_bitmap=TRUE) {
# This value is technically not necessarily the same for all agents, but we're assuming it is
if(from_bitmap == TRUE) {
store_layout <- read_img_map(pbm_path)
} else {
store_layout = store_layout
}
img_w = dim(store_layout$walls_mat)[1]
img_h = dim(store_layout$walls_mat)[2]
agent_list <- create_agent_list(store_layout, n_agents)
density_mat <- simulate_density(store_layout, agent_list, coeff, plot, name, img_w, img_h)
density_df = make_df_full(density_mat)
item_mat <- make_mat(store_layout$target_df, "value")
item_df <- make_df_full(item_mat)
item_df <- item_df[order(-item_df$value),]
item_df$frag <- c(rev(storedata$frag), rep(0, nrow(item_df)-length(storedata$frag)))
item_df$ghi <- c(rev(storedata$ghi), rep(0, nrow(item_df)-length(storedata$ghi)))
item_df$discounted_price <- c(rev(storedata$discounted_price), rep(0, nrow(item_df)-length(storedata$discounted_price)))
item_df$qty <- c(rev(storedata$qty), rep(0, nrow(item_df)-length(storedata$qty)))
loss_mat <- matrix(0, nrow=48, ncol=48)
loss_mat[] <- apply(density_df,1,get_monetary_loss, item_df=item_df_1, total_ghi=total_ghi, n_agents=n_agents)
loss_df <- make_df_full(loss_mat)
loss <- loss_fn(loss_df$value)
output = list(density_mat, loss_mat, loss)
return(output)
}
source('~/Desktop/IMMC/IMMC/simulate.R', echo=TRUE)
test <- simulate("example.pbm", storedata, n_agents = 5)
rev(storedata$frag)
test <- simulate("example.pbm", storedata=storedata, n_agents = 5)
View(test)
plot_mat(test[[1]])
plot_mat(test[[2]])
plot_mat(test[[1]])
source('~/Desktop/IMMC/IMMC/simulate.R', echo=TRUE)
test <- simulate("example.pbm", storedata=storedata, n_agents = 5)
plot_mat(test[[1]])
plot_mat(test[[2]])
View(test)
source('~/Desktop/IMMC/IMMC/simulate.R', echo=TRUE)
example <- simulate("example.pbm", storedata, n_agents = 5, plot=TRUE)
source('~/Desktop/IMMC/IMMC/simulate.R', echo=TRUE)
example <- simulate("example.pbm", storedata=storedata, n_agents = 5, plot=TRUE)
example <- simulate("example.pbm", storedata=storedata, n_agents = 100, plot=TRUE)
plot_mat(example[[1]])
plot_mat(example[[2]])
print(example[[3]])
# Performing replicates with little overhead; parallelisation with doPar
library(foreach)
library(doParallel)
cl <- makeCluster(5)
registerDoParallel(cl)
results <- foreach(i=1:n_reps) %dopar%
simulate("example.pbm", storedata=storedata, n_agents = 5, plot=FALSE)
n_reps=5
results <- foreach(i=1:n_reps) %dopar%
simulate("example.pbm", storedata=storedata, n_agents = 5, plot=FALSE)
source("simulate.R", local=TRUE)
results <- foreach(i=1:n_reps, .packages='dplyr, grid, reshape2, pixmap') %dopar%
simulate("example.pbm", storedata=storedata, n_agents = 5, plot=FALSE)
results <- foreach(i=1:n_reps, .packages=c("dplyr", "grid", "reshape2", "pixmap") %dopar%
results <- foreach(i=1:n_reps, .packages=c("dplyr", "grid", "reshape2", "pixmap")) %dopar%
simulate("example.pbm", storedata=storedata, n_agents = 5, plot=FALSE)
source("simulate.R", local=TRUE)
results <- foreach(i=1:n_reps, .packages=c("dplyr", "grid", "reshape2", "pixmap")) %dopar%
simulate("example.pbm", storedata=storedata, n_agents = 5, plot=FALSE)
results <- foreach(i=1:n_reps, .packages=c("dplyr", "grid", "reshape2", "pixmap"), .export="base") %dopar%
simulate("example.pbm", storedata=storedata, n_agents = 5, plot=FALSE)
results <- foreach(i=1:n_reps, .packages=c("dplyr", "grid", "reshape2", "pixmap"), .export="AStar") %dopar%
simulate("example.pbm", storedata=storedata, n_agents = 5, plot=FALSE)
stopCluster(cl)
# Performing replicates with little overhead; parallelisation with doPar
library(foreach)
library(doParallel)
cl <- makeCluster(5, type="FORK")
registerDoParallel(cl)
n_reps=5
results <- foreach(i=1:n_reps) %dopar%
simulate("example.pbm", storedata=storedata, n_agents = 5, plot=FALSE)
View(results)
cl <- makeCluster(5, type="PSOCK")
registerDoParallel(cl)
n_reps=5
results <- foreach(i=1:n_reps) %dopar%
simulate("example.pbm", storedata=storedata, n_agents = 5, plot=FALSE)
foreach(i=c("test", "test2")) %do%
print(i)
#################################################################################
#ffff00 = Target objects (for now, the first target for all agents)
## Can be placed in any shelf position (so every wall tile minus the entrance wall)
shelf_mat <- store_layout$walls_mat
# Zero out the entrance wall
shelf_mat[nrow(shelf_mat),] <- 0
# Convert the available spots into df format for sampling
shelf_df <- make_df(shelf_mat, 1)
shelf_positions <- shelf_df[sample(nrow(shelf_df), 134),]
shelf_positions<-shelf_positions[order(shelf_positions$y),]
#Sort Item catalog by happiness
storedata_sorted<-storedata[order(storedata$ghi),]
shelf_positions$item_id <- storedata_sorted$item_id
shelf_positions$ghi <- storedata_sorted$ghi
shelf_positions <- shelf_positions[order(shelf_positions$item_id),]
store_layout$target_df<-shelf_positions
source("simulate.R", local=TRUE)
n_reps = 5
results = list()
for(i in 1:n_reps) {
results[i] <- simulate("example.pbm", storedata=storedata, n_agents = 100, plot=FALSE)
}
View(results)
# Baseline: completely randomised arrangement of items
results = list()
for(i in 1:n_reps) {
results[[i]] <- simulate("example.pbm", storedata=storedata, n_agents = 100, plot=FALSE)
}
View(results)
plot_mat(results[[1]])
plot_mat(results[[1]][[2]])
plot_mat(results[[1]][[1]])
plot_mat(results[[1]][[3]])
plot_mat(results[[1]][[2]])
plot_mat(results[[1]][[2]])
plot <- plot_mat(results[[1]][[2]])
plot
plot <- plot_mat(results[[1]][[1]])
plot
plot <- plot_mat(results[[1]][[1]])
plot
mat <- results[[1]][[1]]
plot_mat(mat)
plot_mat(mat)
p<-plot_mat(mat)
p
save.image("~/Desktop/IMMC/IMMC/bak2.RData")
