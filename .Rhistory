}
for(k in current_path) {
density_mat[k[1], k[2]] <- density_mat[k[1], k[2]] + 1
}
file_name = paste("density_plot_", i, "_", j, ".tiff", sep="")
density_df = make_df_full(density_mat)
p <- ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggsave(plot=p, filename=file_name, width=1, height=1, units="in", dpi=300, device="tiff")
}
}
# Initialise with an empty density matrix
density_mat = matrix(0, img_w, img_h)
# Starting crowd avoidance coefficient of 0.001
coeff = 0.001
for(i in 1:length(agent_list)) {
current_agent <- agent_list[[i]]
# Route btw first two targets (entrance to target 1)
n_routes <- length(current_agent) - 1
for(j in 1:n_routes) {
source = current_agent[[j]]
target = current_agent[[j+1]]
mg <- SearchMaze2D$new(walls_mat, density_mat, coeff)
current_path <- mg$run(source, target)
if (is.null(current_path)) {
current_path <- mg$run(target, source)
}
for(k in current_path) {
density_mat[k[1], k[2]] <- density_mat[k[1], k[2]] + 1
}
file_name = paste("density_plot_", i, "_", j, ".tiff", sep="")
density_df = make_df_full(density_mat)
p <- ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggsave(plot=p, filename=file_name, width=1, height=1, units="in", dpi=150, device="png")
}
}
# Initialise with an empty density matrix
density_mat = matrix(0, img_w, img_h)
# Starting crowd avoidance coefficient of 0.001
coeff = 0.001
for(i in 1:length(agent_list)) {
current_agent <- agent_list[[i]]
# Route btw first two targets (entrance to target 1)
n_routes <- length(current_agent) - 1
for(j in 1:n_routes) {
source = current_agent[[j]]
target = current_agent[[j+1]]
mg <- SearchMaze2D$new(walls_mat, density_mat, coeff)
current_path <- mg$run(source, target)
if (is.null(current_path)) {
current_path <- mg$run(target, source)
}
for(k in current_path) {
density_mat[k[1], k[2]] <- density_mat[k[1], k[2]] + 1
}
file_name = paste("density_plot_", i, "_", j, ".tiff", sep="")
density_df = make_df_full(density_mat)
p <- ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggsave(plot=p, filename=file_name, width=1, height=1, units="in", dpi=150, device=png())
}
}
# Initialise with an empty density matrix
density_mat = matrix(0, img_w, img_h)
# Starting crowd avoidance coefficient of 0.001
coeff = 0.001
for(i in 1:length(agent_list)) {
current_agent <- agent_list[[i]]
# Route btw first two targets (entrance to target 1)
n_routes <- length(current_agent) - 1
for(j in 1:n_routes) {
source = current_agent[[j]]
target = current_agent[[j+1]]
mg <- SearchMaze2D$new(walls_mat, density_mat, coeff)
current_path <- mg$run(source, target)
if (is.null(current_path)) {
current_path <- mg$run(target, source)
}
for(k in current_path) {
density_mat[k[1], k[2]] <- density_mat[k[1], k[2]] + 1
}
file_name = paste("density_plot_", i, "_", j, ".png", sep="")
density_df = make_df_full(density_mat)
p <- ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggsave(plot=p, filename=file_name, width=1, height=1, units="in", dpi=150, device="png")
}
}
# Initialise with an empty density matrix
density_mat = matrix(0, img_w, img_h)
# Starting crowd avoidance coefficient of 0.001
coeff = 0.001
for(i in 1:length(agent_list)) {
current_agent <- agent_list[[i]]
# Route btw first two targets (entrance to target 1)
n_routes <- length(current_agent) - 1
for(j in 1:n_routes) {
source = current_agent[[j]]
target = current_agent[[j+1]]
mg <- SearchMaze2D$new(walls_mat, density_mat, coeff)
current_path <- mg$run(source, target)
if (is.null(current_path)) {
current_path <- mg$run(target, source)
}
for(k in current_path) {
density_mat[k[1], k[2]] <- density_mat[k[1], k[2]] + 1
}
file_name = paste("density_plot_", i, "_", j, ".png", sep="")
density_df = make_df_full(density_mat)
p <- ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggsave(plot=p, filename=file_name, width=1, height=1, units="in", dpi=150, device="png")
}
}
density_df = make_df_full(density_mat)
ggplot(density_df)
density_df = make_df_full(density_mat)
ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
density_df = make_df_full(density_mat)
ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile()
View(density_df)
density_df = make_df_full(density_mat)
library(dplyr)
library(grid)
library(reshape2)
library(pixmap)
library(ggplot2)
source("/Users/matthewtham/Desktop/IMMC/IMMC/astar.R")
source("/Users/matthewtham/Desktop/IMMC/IMMC/examples.R")
density_df = make_df_full(density_mat)
ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile()
ggplot(density_df, aes(x=x,y=y,fill=value)) +
geom_tile() +
geom_tile(data=walls_df_1, fill="#FFFFFF") +
scale_y_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
scale_x_continuous(breaks = seq(0, 48, 1), limits = c(0, 48.5), minor_breaks = NULL) +
coord_equal() +
scale_fill_viridis_c() +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
legend.position = "none")
total_density = sum(density_df$value)
total_density_nl = sum(density_df$value^2)
# Shaping a loss function
n_routes = 3
loss_min = 0
loss_max = img_h*img_w*n_agents*n_routes
# Start with an easy sample of 100
n_agents = 100
loss_max = img_h*img_w*n_agents*n_routes
total_density = sum(density_df$value)
total_density_nl = sum(density_df$value^2)
total_density_norm = (total_density-loss_min)/(loss_max-loss_min)
# Represents the density in the worst case scenario
## Value is divided by 2 because even in the worst case (a linear maze of shelves) where all agents seek the last item, the average path length is about equal to half the total tile count
loss_max = img_h*img_w*n_agents*n_routes/2
total_density = sum(density_df$value)
total_density_norm = (total_density-loss_min)/(loss_max-loss_min)
total_density_nl = sum(density_df$value^2)
total_density_nl_norm = (total_density_nl-loss_min)/(loss_max^2-loss_min)
loss_norm <- function(densities, img_h, img_w, n_agents, n_routes) {
loss_max = img_h*img_w*n_agents*n_routes/2
total_density = sum(densities$value)
return(x/(loss_max))
}
loss_norm(density_df$value)
loss_norm <- function(densities, img_h=48, img_w=48, n_agents, n_routes) {
loss_max = img_h*img_w*n_agents*n_routes/2
total_density = sum(densities$value)
return(x/(loss_max))
}
loss_norm(density_df$value, 100, 3)
loss_norm <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
loss_max = img_h*img_w*n_agents*n_routes/2
total_density = sum(densities$value)
return(x/(loss_max))
}
loss_norm(density_df$value, 100, 3)
loss_norm <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
loss_max = img_h*img_w*n_agents*n_routes/2
total_density = sum(densities)
return(x/(loss_max))
}
loss_norm(density_df$value, 100, 3)
loss_norm <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
loss_max = img_h*img_w*n_agents*n_routes/2
total_density = sum(densities)
return(total_density/(loss_max))
}
loss_norm(density_df$value, 100, 3)
loss_norm_sq <- function(total_density, loss_max) {
loss_max = img_h*img_w*n_agents*n_routes/2
loss_max = loss_max^2
total_density = sum(densities^2)
return(total_density/(loss_max))
}
loss_norm_sq(density_df$value)
loss_norm_sq <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
loss_max = img_h*img_w*n_agents*n_routes/2
loss_max = loss_max^2
total_density = sum(densities^2)
return(total_density/(loss_max))
}
loss_norm_sq(density_df$value)
loss_norm_sq(density_df$value, 100)
loss_norm_sq(density_df$value, 100, 3)
print(i)
for(i in 1:n_agents*n_routes){
print(i)
}
norm_y <- c()
for(i in 1:(n_agents*n_routes)){
print(i)
}
# Shaping a loss function
n_agents = 100
n_routes = 3
loss_min = 0
loss_norm <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
loss_max = img_h*img_w*n_agents*n_routes/2
total_density = sum(densities)
return(total_density/(loss_max))
}
norm_y <- c()
for(i in 1:(n_agents*n_routes)){
densities = rep(i, img_h*img_w)
norm_y[i] = loss_norm(densities, n_agents, n_routes)
}
loss_norm_y <- c()
loss_norm_y <- c()
for(i in 1:(n_agents*n_routes)){
densities = rep(i, img_h*img_w)
loss_norm_y[i] = loss_norm(densities, n_agents, n_routes)
}
loss_norm_df <- data.frame(x=1:(n_agents*n_routes), y=loss_norm_y)
ggplot(loss_norm_df, aes(x=x, y=y)) +
geom_point()
ggplot(loss_norm_df, aes(x=x, y=y)) +
geom_line()
for(i in 1:(n_agents*n_routes)){
densities = rep(i, img_h*img_w/2)
loss_norm_y[i] = loss_norm(densities, n_agents, n_routes)
}
loss_norm_df <- data.frame(x=1:(n_agents*n_routes), y=loss_norm_y)
ggplot(loss_norm_df, aes(x=x, y=y)) +
geom_line() +
theme_minimal() +
coord
loss_norm_y <- c()
for(i in 1:(n_agents*n_routes)){
densities = rep(i, img_h*img_w/2)
loss_norm_y[i] = loss_norm(densities, n_agents, n_routes)
}
loss_norm_df <- data.frame(x=1:(n_agents*n_routes), y=loss_norm_y)
ggplot(loss_norm_df, aes(x=x, y=y)) +
geom_line() +
theme_minimal()
plot_loss <- function(fn) {
loss_norm_y <- c()
for(i in 1:(n_agents*n_routes)){
densities = rep(i, img_h*img_w/2)
loss_norm_y[i] = fn(densities, n_agents, n_routes)
}
loss_norm_df <- data.frame(x=1:(n_agents*n_routes), y=loss_norm_y)
ggplot(loss_norm_df, aes(x=x, y=y)) +
geom_line() +
theme_minimal()
}
plot_loss(loss_norm)
loss_norm_sq <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
loss_max = img_h*img_w*n_agents*n_routes/2
loss_max = loss_max^2
total_density = sum(densities^2)
return(total_density/(loss_max))
}
plot_loss(loss_norm_sq)
sqrt(c(1:100))
loss_norm_sqrt <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
loss_max = img_h*img_w*n_agents*n_routes/2
loss_max = sqrt(loss_max)
total_density = sum(sqrt(densities))
return(total_density/(loss_max))
}
plot_loss(loss_norm_sqrt)
plot_loss(loss_norm_sq)
loss_norm <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
worst_case = rep(n_agents*n_routes, img_h*img_w/2)
loss_max = worst_case
total_density = sum(densities)
return(total_density/(loss_max))
}
loss_norm_sq <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
worst_case = rep(n_agents*n_routes, img_h*img_w/2)
loss_max = worst_case^2
total_density = sum(densities^2)
return(total_density/(loss_max))
}
plot_loss(loss_norm)
loss_norm <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
worst_case = rep(n_agents*n_routes, img_h*img_w/2)
loss_max = sum(worst_case)
total_density = sum(densities)
return(total_density/(loss_max))
}
loss_norm <- function(densities, n_agents, n_routes, img_h=48, img_w=48) {
worst_case = rep(n_agents*n_routes, img_h*img_w/2)
loss_max = sum(worst_case)
total_density = sum(densities)
return(total_density/(loss_max))
}
plot_loss(loss_norm)
loss <- function(densities) {
total_density = sum(densities)
return(total_density)
}
loss_max = loss(worst_case)
worst_case = rep(n_agents*n_routes, img_h*img_w/2)
loss_max = loss(worst_case)
norm_loss <- function(loss, get_loss) {
loss_max = get_loss(worst_case)
return(loss/loss_max)
}
worst_case = rep(n_agents*n_routes, img_h*img_w/2)
norm_loss <- function(loss, get_loss) {
loss_max = get_loss(worst_case)
return(loss/loss_max)
}
get_loss <- function(densities) {
loss = sum(densities)
return(loss)
}
plot_loss <- function(get_loss) {
loss_norm_y <- c()
for(i in 1:(n_agents*n_routes)){
densities = rep(i, img_h*img_w/2)
loss = get_loss(densities)
loss_norm_y[i] = norm_loss(loss, get_loss)
}
loss_norm_df <- data.frame(x=1:(n_agents*n_routes), y=loss_norm_y)
ggplot(loss_norm_df, aes(x=x, y=y)) +
geom_line() +
theme_minimal()
}
plot_loss <- function(get_loss) {
loss_norm_y <- c()
for(i in 1:(n_agents*n_routes)){
densities = rep(i, img_h*img_w/2)
loss = get_loss(densities)
loss_norm_y[i] = norm_loss(loss, get_loss)
}
loss_norm_df <- data.frame(x=1:(n_agents*n_routes), y=loss_norm_y)
ggplot(loss_norm_df, aes(x=x, y=y)) +
geom_line() +
theme_minimal()
}
plot_loss(get_loss)
plot_loss(get_loss_sq)
get_loss_sq <- function(densities) {
loss = sum(densities^2)
return(loss)
}
plot_loss(get_loss_sq)
get_loss_sqrt <- function(densities) {
loss = sum(sqrt(densities))
return(loss)
}
plot_loss(get_loss_sqrt)
plot_loss <- function(get_loss) {
loss_norm_y <- c()
for(i in 0:(n_agents*n_routes)){
densities = rep(i, img_h*img_w/2)
loss = get_loss(densities)
loss_norm_y[i] = norm_loss(loss, get_loss)
}
loss_norm_df <- data.frame(x=0:(n_agents*n_routes), y=loss_norm_y)
ggplot(loss_norm_df, aes(x=x, y=y)) +
geom_line() +
theme_minimal()
}
get_loss <- function(densities) {
loss = sum(densities)
return(loss)
}
plot_loss(get_loss_sqrt)
0:(n_agents*n_routes)
length(0:(n_agents*n_routes))
0:(n_agents*n_routes)
length(0:(n_agents*n_routes))
plot_loss <- function(get_loss) {
loss_norm_y <- c()
for(i in 0:(n_agents*n_routes)){
densities = rep(i, img_h*img_w/2)
loss = get_loss(densities)
loss_norm_y[i+1] = norm_loss(loss, get_loss)
}
loss_norm_df <- data.frame(x=0:(n_agents*n_routes), y=loss_norm_y)
ggplot(loss_norm_df, aes(x=x, y=y)) +
geom_line() +
theme_minimal()
}
plot_loss(get_loss_sqrt)
get_loss_exp <- function(densities) {
loss = sum(exp(densities))
return(loss)
}
plot_loss(get_loss_exp)
get_loss_log <- function(densities) {
loss = sum(log(densities+0.1))
return(loss)
}
plot_loss(get_loss_log)
plot_loss(get_loss_sqrt)
plot_loss(get_loss_log)
plot_loss(get_loss_sqrt)
norm_loss(get_loss_sqrt(density_df$value), get_loss_sqrt)
# Im a fan of log, lets go for that
plot_loss(get_loss_log)
# Loss for our current arrangement (complete randomisation)
norm_loss(get_loss_sqrt(density_df$value), get_loss_sqrt)
# Loss for our current arrangement (complete randomisation)
norm_loss(get_loss_log(density_df$value), get_loss_log)
get_loss_log <- function(densities) {
loss = sum(log(densities+1))
return(loss)
}
# Im a fan of log, lets go for that
plot_loss(get_loss_log)
# Loss for our current arrangement (complete randomisation)
norm_loss(get_loss_log(density_df$value), get_loss_log)
print(current_loss)
# Loss for our current arrangement (complete randomisation)
current_loss <- norm_loss(get_loss_log(density_df$value), get_loss_log)
print(current_loss)
source("astar.R")
source("examples.R")
